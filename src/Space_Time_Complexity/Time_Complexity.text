Time Complexity is not euqal to time taken.
Time Complexity is the function that gives us the relationship about how the time grows as the input grows.
WHY DO WE CARE??
    It helps us to predict which algorithm is faster
WHAT DO WE ACTUALLY NEED TO CONSIDER WHEN THINKING ABOUT COMPLEXITY??
    Always look for worst case complexity.
    Always look at complexity for large infinite data.
    We Dont need to worry about constants
    Always Ignore less dominating terms
Big-Oh Notation:
    It says Time Clomplexity will not exeed N^3{Upper Bound}
Big-omega Notation:
    Opposite of Big-Oh Notation
    It says Time Clomplexity will be never below N^3{Lower Bound}
Theta Notation:
    Both Upper Bound and Lower bound is equal to N^2
Little-Oh
    Strictly smaller than Time Clomplexity N^3{Upper Bound}
Little-omega
    Strictly greater than Time Clomplexity N^3{Upper Bound}

Space_Complexity of Recursive Algo = Height of the Tree

2 Types of Recursion
    1) Linear                                               2) Divide And Conquer
    F(N) = F(N - 1) + F(N - 2)                              F(N) = F(N / 2) + O(1)
